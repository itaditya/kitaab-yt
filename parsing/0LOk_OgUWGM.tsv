30	have you heard the hype around
1860	progressive web apps if you haven't
4259	don't worry about it because the tech
5400	press isn't going to let you get away
6779	from it for long they're already writing
9030	articles about how Google is I'm sorry
11460	Google is plotting and others are
13620	plotting the revenge of the web app and
15690	since I'm here to talk about progressive
17130	web apps that means that I'm part of
18390	some sort of secret cabal out for
21060	revenge so you better watch out later at
23220	the party they're also writing about how
25590	progressive web apps promis'd up in
27300	native mobile applications we will no
29250	longer need native applications
30900	everything will be the web as it was
32850	originally intended thank you very much
36260	or you know which is in stark contrast
38640	to where we were just a little bit ago
40379	we're wired was writing about how the
42270	web was dead well they've updated it and
45090	the web is no longer dead in fact it's
47460	been saved and Google saved it and you
49829	know how they saved it well yes that's
51870	right progressive Web Apps see anytime
54840	there's an opportunity for the media to
57210	sort of pit two groups to get against
59309	each other you know Republicans versus
61050	Democrats native app developers versus
63570	web developers they'll do it and they've
65250	been doing it since the iPhone came out
67110	they loved this idea of having you know
69150	a cage match between web and native and
73619	I I am I'm just I'm so bloody frustrated
78030	with this like I'm tired of this
80100	conversation since 2008 and to see it
84659	sort of peaking again with progressive
86189	web apps is incredibly frustrating
87840	because I'm I mean I'm really bullish
90180	about progressive web apps so take a
93810	moment take a deep breath reset a little
96630	bit see we're really early when it comes
99509	to progressive web apps we're probably
101159	about here on Gartner's hype cycle we've
104640	got a long ways to go before we hit that
106710	sort of peak of inflated expectations
108630	and we need to tamp down the
110700	expectations just a little bit because
112290	if everybody thinks that we're gonna
113670	replace native applications which is
115799	never going to happen that trough of
117780	disillusionment isn't going to look like
119460	sort of a nice fun smooth rollercoaster
122369	that it is on the graph it's just going
123990	to be a cliff that we're gonna fall off
125880	of so I'm gonna cut through the hype and
128700	talk about really why organisations
130770	should be looking at progressive Web
132060	Apps and then
133080	if you start building a progressive web
134520	app the sorts of challenges you might
135990	face from a UX perspective as you decide
139050	what portions of your site or you know
141060	how to make your site into a progressive
142740	web app so first what is a progressive
146490	web app progressive web app is a term
148920	coined by Francis Berryman and Alex
150570	Russell to describe a set of technology
153060	that was previously only available on
155040	native applications there's a long list
157950	of them in their original post I'm just
160290	going to point out a couple of them that
161280	I think are the most important you have
162870	applications that are nearly
164090	instantaneous in terms of their loading
166350	behavior they're available offline
168240	you've got the ability to do push
169710	notifications you have the sort of
172050	prompt to add an icon to the home screen
174870	and companies that are building
176910	progressive web apps are doing some
178440	really interesting stuff with them
179700	Flipkart is like the first sort of big
182130	example and I think the most like it's
184800	particularly interesting because they
186150	abandoned mobile web they didn't feel
189870	like their mobile web experience was
191100	sufficient so they decided to try to
192630	route everybody to to dusta or to native
196890	applications and they're very large
198900	e-commerce company in India this did not
201480	turn out so well for them so they
203310	returned to the web with a progressive
205320	web app and as you can see it's a very
206550	fluid experience it feels great it's
209760	very fast and it actually works offline
212790	as well so the great thing about
216060	progressive web apps is that they are
218010	sort of best practices for the web and
221070	because they're best practices for the
223050	web browsers are providing browser
224820	makers are providing incentives to try
227070	to encourage us to adopt progressive web
229560	app technology some of the incentives
233610	are available right now for example if
235410	you're on Android devices and you browse
238890	to a progressive web app it'll ask if
240660	you want to add it to your home screen
242010	and if you add it to the home screen
243600	then you get an icon now this add add to
247530	homescreen behavior is going to change
251430	over time and this is something that I'm
253049	excited about browsers hope that they'll
255120	be able to monitor how people interact
257040	with progressive web apps and develop
259260	heuristics that will do a better job of
261270	knowing when somebody actually is going
263340	to want to add it to their home screen
265010	so instead of what happens right now
266750	which is we hit webpages and over and
268910	over again people were like at home or
271040	like install our app install her app
272960	install our have instead browsers may be
275060	able to say hey this person has visited
277460	the site multiple times there actually
279500	look like they're engaged with it and
280820	now we're gonna add to homescreen we're
282500	gonna ask if they want to add to
283700	homescreen
284150	now right now the heuristic is
286910	incredibly simple but over time that
288620	promises maybe to increase install rates
291820	another thing that Google just announced
294410	recently is that progressive web apps
295730	are getting an integrated more deeply
297410	inside Android so they're now going to
299750	show up in the trays are gonna show up
301100	in settings and system information
302950	progressive web apps are going to
304730	gradually start becoming more like
306620	first-class citizens
307730	in addition there are things that I
310460	suspect will be coming very soon as
312620	incentives that browser makers are
314210	providing for progressive web apps for
317060	example app stores Microsoft has already
319190	talked about the fact that they're
320900	interested in how they may be able to do
322640	progressive web apps inside the
323960	Microsoft Store they they already have
326450	HTML applications inside the store so
328910	it's not a stretch to say the PWA s
330650	would make sense there Google has said
333200	that they're they're deprecating they're
335230	Chrome App Store in favor of PWA is we
338660	don't know what form that'll take but
340100	that's on its way as well Alex Russell
343310	when he was writing about ways that
345710	people might discover progressive web
347540	apps said that you know he theorized
349550	that we might see a situation where
351440	being highlighted progressive web apps
353570	put them higher in search results like
355610	badged them did other things because
357440	they're fast and they're installable and
359330	they're you know very much the best of
362060	the web he also added the caveat though
365720	that Alex doesn't work for for Microsoft
368510	so he doesn't know what Bing might do it
372050	does work for Google though and they've
374510	got a pretty big search engine so we
375980	might have some insights into the sorts
377540	of things that Google's looking at but
380210	even if they don't do any of these
381560	things progressive web app simply makes
383570	sense irrespective of what browsers
386240	provided as incentives irrespective of
388040	what people do with their native
389780	applications and I'm gonna explain why I
392810	think this makes sense in six simple
394520	statements that I think even a native
395990	app developer would agree with
398420	so the first is that not every customer
401000	or potential customer will install your
403370	native application you might be thinking
406130	well yeah duh of course but sometimes we
410180	have to restate the obvious when I found
414200	in talking to organizations that already
415760	have native applications when they hear
417440	about progressive web apps are like why
418880	would we need to do that and in
420800	particular the native application
422420	developers are like you know stop trying
424220	to make the web into native like native
426200	does it better that web shouldn't be
427970	apps and these sorts of things and I
430250	have to remind them well not all of your
432380	customers are installing your native
435320	application because of that if you
437330	provided a better experience for those
438770	web customers you would probably in
440240	convert you would increase conversion
442010	you would increase revenue plus there
445640	are some problems with app stores right
448730	and progressive web apps might provide
451430	sort of some some some ways to fill in
453860	the gaps in these cracks around app
455300	stores there are over two million apps
457940	in the iOS and Android app stores so
460970	showing up and and just being an app
462740	store it's not sufficient we know that
465920	the average user in the United States
467390	doesn't download any apps in the average
470450	month that's an impediment we also know
474530	that a ploy 'l t is really low that as
477230	people interact with their applications
479420	after 90 days it's less than 10% of
481190	people continue to daily use there
483410	continued to be daily active users of a
485510	particular application that they've
486920	downloaded so the cost of acquisition on
490040	in the app stores has gotten really
491960	really high so it would be great if we
494660	had other strategies in case we don't
497030	succeed in native apps like keep doing
499160	native apps but they're gonna people who
501080	fall through the cracks and for them
502790	like there might be actually a lot of
505370	people mobile web audience there's
507260	almost three times as large and growing
509390	twice as fast as app audiences all right
512810	the second thing you should provide a
514430	secure website or app for your customers
516380	if you're doing any sort of e-commerce
518060	this just completely makes sense right
520340	we got to keep those guys out and maybe
522140	those guys and we should probably
524060	encrypt all the things and the reality
527300	is is that the new features related to
529010	browsers right the ability to
531660	I use HTTP to even old features like
535110	geolocation now only work on on secure
538800	sites progressive web apps require a
541139	secure site that's one of the
542730	requirements third thing you should
545430	provide a fast experience for your users
547319	we know through a ton of case studies
550350	that faster sites being more revenue
552569	higher conversions and progressive web
554850	apps are one of the best ways to provide
556470	a fast experience what the Washington
560040	Post found was that even their mobile
562110	site which had been optimized quite a
563670	bit was still substantially faster once
566459	they did a progressive web app it's less
568259	than a second load time that's nearly
569879	instantaneous people don't notice the
572459	differences or they don't they don't
574110	perceive it as taking time if it's less
575939	than a second all of this is done
578459	because of a technology called service
580199	workers service workers allow us as web
582930	developers to specify specifically the
585180	things that we should cache offline and
587100	when the browser should go out to the
588720	network to get new versions of those and
590370	when they should grab them from the
591329	cache it gives us much more control of
593339	that um and that is in essence what a
595529	native application is right like it's a
597329	bunch of things that are stored offline
598860	so that when you watch that app all the
602069	application has to do is go download new
604079	stuff
604589	well service workers allow us to do that
606420	on the web the fourth thing you might
610350	want to do is provide an offline
612209	experience right it might benefit your
614550	users and here's the fun thing the
618029	service workers are also the key to
619680	providing an offline experience so if
621360	you've already done the stuff to use
622740	service workers to provide a faster
624750	experience actually going and providing
627029	an offline experience isn't much
628319	different you might benefit your
632790	customers might benefit from providing
634350	push notifications if your eBay right
637110	and somebody comes to an auction from a
639509	social link or something like that like
641459	wouldn't it be nice if you could say hey
642990	do you want to receive a push
644519	notification five minutes before this
646709	auction ends right in order to receive a
649319	notification now that person would have
651149	to go to the App Store find your app
653430	install your app go find that auction
655259	item again and then sign up for
656699	notifications and give permission for
658529	that notification but that's a high
660660	barrier for somebody who doesn't already
662189	have that app installed and
664650	from a web perspective we could now ask
666750	them if they want to receive that
668670	notification they get prompt for
670590	permissions and now they get the
672300	notification
673220	all right the sixth thing this is really
676680	simple can you do a text file and make
678600	some icons because that's all that's
680730	left is a manifest file manifest file is
684630	simply a JSON document that describes
686490	where icons are located what the start
688860	URL is what you want your backgrounds to
690960	look like things like that so the thing
694590	that I really like about progressive web
695970	apps is that every step on the path to
697650	progressive web app makes sense on its
699750	own right each one of those six items is
703140	something that makes logical sense and
704580	will provide a better user experience
706410	and early returns on progressive web
709530	apps are incredibly promising
710880	I'm conga for example saw incredible
713370	increases in their performance it's
715890	actually faster than what they were
717090	having from their native application
718580	extra electronics has seen a 12%
721230	increase in click-through rate 100% more
722970	sales from users arriving via web push
725330	4x increase in engagement five miles has
728850	a 50% decrease of bounce rates 30%
731640	better conversion for people who arrived
733770	via add to homescreen there are a bunch
736230	of these case studies showing how
737520	progressive web apps provide a better a
740570	better experience for people and
743250	increased conversion for organizations
745670	now what often times happens is people
747990	will say well that's great but iOS
749940	doesn't support progressive web apps so
751470	we can't do progressive web apps now and
753480	I think that that's a bit misleading
756090	like it depends a bit on what your
757860	definition of support is so the fact
763140	that it's a progressive web app means
765090	that it's using a progressive
766740	enhancement progressive web apps work
768960	fine on iOS they don't have all the same
773010	features that they do on Android but
774630	they still are functional they still
776400	continue to be applications that you can
779010	interact with the browsers that do
782520	support progressive web apps or have
783990	indicated that they're going to support
785310	progressive web apps represent billions
787050	of users in the world
788490	we shouldn't prevent them from having
789930	these features just because iOS doesn't
791970	provide them yet and the Safari team has
795390	hinted at the fact that they're looking
796860	at service workers it's
798120	under consideration and in the roadmap
799890	they talk about how they just like they
802230	were working on the fetch API that they
803820	just released as a precursor for being
805950	able to work on service workers and
807300	service workers are like the most
808710	important piece so we may get some of
811320	the benefits on iOS soon but even if we
814770	don't businesses are finding that when
817350	they convert things to progressive web
819210	apps that they're actually seeing
820440	benefits on iOS
821970	even though iOS doesn't have all the
823529	features so all they express 104 percent
827160	increase in conversion for new users
828870	across all their browsers 84% increase
831600	in iOS conversion the Washington Post
835320	saw a 5x increase in user engagement and
838500	I asked the Product Manager like is that
840660	different between iOS and Android and he
843480	said they're minimal differences so I
845940	did a bunch of research into progressive
847830	web apps to try to figure out why I
849660	think that they're they're operating why
851460	the Washington Post was seeing this
853080	return and I think that it has simply to
856920	do with performance when the Washington
860279	Post spent a lot of time working on
861900	their progressive web app and trying to
864450	make sure that the progressive web app
865830	was as fast as possible it meant that it
868920	was faster even on devices that don't
870630	support service workers I think in many
873990	ways that progressive web apps are kind
875790	of like a Trojan horse for performance
877529	right you get people really excited
879810	about the icon on the home screen and
881370	then you pull up lighthouse which is
883290	this tool that that tests your progress
885510	web app to see how fast it is and how
887400	well it works offline and things like
889200	that and you're like well our score is
890520	really bad like we need to increase that
892680	so now we're gonna work on performance
894860	so there are some benefits from using
897570	progressive web apps as as a tool to get
900240	organizations looking at performance so
903690	progressive web app simply makes sense
905459	and I think they make sense for a lot of
907320	organizations irrespective of what they
909779	do on native applications but the fact
912270	that they simply make sense does it mean
914580	that they're simple to design and build
917089	in particular I'm um enamored with some
922890	questions that I think have been around
924600	since the early days of the iPhone then
926790	we've been able to avoid up until now
929160	but as we work on progressive web apps
931410	we're actually
931980	going to have to face these questions
933420	again so back in the early days after
937470	the iPhone came out a lot of websites
940170	look like iOS are actually iPhone OS UI
945060	right this is wptouch it's a very
947730	popular theme for WordPress it was
950520	designed to look like an iPhone
953010	application many websites were doing
955770	that this is what wptouch looks like now
960410	it's definitely borrowing some
962670	conventions from iOS and some
964830	conventions from Android and probably
967350	some from Windows but it's unique right
970440	it doesn't necessarily feel like any one
972330	of those platforms I think over the last
974670	decade we've developed our own design
977100	language when it comes to the web when
979890	it comes to responsive designs but when
984450	we start looking at progressive web apps
987470	there are a lot of people who are
989250	starting to wonder like how much we need
991050	to make those apps feel like native
992880	applications owen campbell moore who
994680	works for google wrote this really
996300	actually it's an exceptional document
997890	talking about designing great UIs for
999810	progressive web so i highly recommend it
1001700	in the midst of it he says some things
1003650	that that i was a little surprised by
1006740	right for like forgetting every that
1009230	when it comes to designing progressive
1010820	web apps you forget everything you know
1012770	about conventional web design like what
1015710	really is that where we're at but he
1020120	goes on to make i think a really good
1022190	point which is that native applications
1024050	give users a certain expectation about
1026330	what those interactions will look like
1028190	and if you have an icon on the home
1030260	screen that's very near very near other
1034460	icons you may not the user may not
1038600	expect that icon to work differently
1040670	than the native applications that
1042230	they've been using these questions I
1046310	think are questions that we were looking
1047570	at sort of in the early days of the
1049010	iPhone for example what makes something
1051320	an app and perhaps more importantly how
1055310	do users expectations change when they
1057740	consider something to be an app now
1061910	these are pretty abstract questions but
1063920	I think that they are the sort of
1065670	it's at the heart of many of the
1067080	discussions that are going on right now
1068370	so I want to look at sort of four
1070200	related questions and then look at some
1072390	things that I think we can already
1074070	assume about what makes user experiences
1076890	in progressive web apps work well so
1080340	first how much should your design match
1082290	the platform Owen and his article made
1085950	this recommendation about how you might
1087480	want to make your progressive web app
1088980	use the system fonts so that they feel
1091680	like an iOS application or they feel
1093750	more like an Android application but it
1097680	makes me wonder right like how many
1099780	platforms are we going to adapt to is it
1102420	also gonna feel like Windows and Fire OS
1104880	and BlackBerry OS and what about desktop
1108150	browsers all right like we don't feel
1110580	like when we're designing something for
1112080	a desktop browser that it has to feel
1113640	like a Mac all right we designed
1115620	something that feels right to the brand
1117900	that we're designing for so in this
1121200	particular case I think that the best
1123060	way to go about this is to define our
1124470	own design and be consistent
1127260	this is TripCase it's a it's a Cordova
1130020	application and it's just as a
1133880	disclosure we've worked on it a little
1135990	bit I'm a big fan of the application
1137820	even if we hadn't worked on it it is the
1140760	same UI consistent from iOS and Android
1144030	and it fits in it doesn't feel foreign
1146910	on either because it feels mobile ish it
1149640	doesn't feel I Oh s ish or Android ish
1154280	another question we need to grapple with
1156390	is what is the impact of going
1157980	chromeless and what does that have on
1159750	our user experiences so in our manifest
1163680	files we can declare whether we're going
1166080	to have our progressive web app work
1168300	with the display mode of browser a
1170400	display mode of minimal UI which as far
1173340	as I can tell none of the browser's
1174210	support currently display mode of
1177300	standalone or a display mode of full
1179220	screen so the browser chrome right which
1183420	is the address bar the tabs the the
1186540	navigation bar at the bottom as we move
1188940	and get rid of those things like we
1192330	start losing stuff so in standalone mode
1194730	we've got the status bar and we've got
1196260	the navigation bar but we no longer have
1198390	the address bar we've
1199530	URLs we've lost the menu we've lost tabs
1203180	move further let me go to fullscreen we
1207000	no longer have those things and we also
1208650	no longer have a back button what has
1212430	previously been described as the second
1214110	most frequently used feature of a
1215820	browser next to clicking on links so I
1220820	should also note just to be clear for
1223470	those of you who are not Android users
1225900	it is possible to pull down and reload a
1228090	progressive web app that's in
1229380	full-screen mode or to swipe up from the
1231330	bottom and get transparent navigation
1234780	bar so you don't get locked into that
1236460	full-screen progressive web app with no
1238620	way to get out but there there are some
1241650	features there that are that are hidden
1242910	I think we've been spoiled by browsers
1245730	we don't realize how much we've been
1248070	spoiled and as we start working on
1251310	progressive web apps we're gonna realize
1252750	that that's the case there are a lot of
1256080	things that the browser provides for us
1257550	that we don't have to worry about right
1259050	like what's going on in terms of the
1260910	system overall the status bar the URL
1263700	for the site the ability to just copy
1265950	the URL the navigation bar in the back
1267930	button I'm even under the menu there are
1270300	things that we don't tend to think about
1271860	right info on this page is it secure is
1274860	it not secure what does the certificate
1276510	look like the ability to download to
1278070	refresh getting into tabs finding text
1282060	on the page um and under the Share
1284880	Option not only do you have sharing but
1288270	you also have printing and email I
1291000	suppose I can tell once you go to like a
1292980	full screen or a standalone progressive
1294930	web app people can't print those web
1299160	pages anymore so it really is a bit of
1304260	roughing it out there once we start
1305940	going outside of the browser Chrome
1307530	we're gonna have to fend for ourselves
1308850	in a lot of ways um even simple stuff
1312150	like adding a back button is oftentimes
1314100	harder than we perceive it to be so
1316590	adding a back button into a progressive
1318270	web app means managing the browser
1320370	history using the history API so that we
1322500	can tell what page somebody should go to
1324660	or what screen somebody should go to
1326580	previously it also oftentimes implies an
1330630	app hierarchy which isn't the case
1333149	necessarily on the web right so in this
1336389	example I went from a category of men's
1340139	outerwear clothing to looking at a bunch
1342989	of different options and then selecting
1344429	one and diving down to a particular
1345869	detail that's very different than say
1348509	like getting a link directly to a web
1352049	page via social or via email something
1355200	like that right this same page from this
1357659	example site where does that button go
1361889	to if I came directly to this site and
1365239	how does that button compared to what
1368729	the back button which looks very similar
1370950	mine to like it's just the same arrow
1374299	they actually go to different places one
1377909	goes up in that app hierarchy which
1380309	because I've come into this app three
1382559	levels down and have never seen the app
1384359	hierarchy I have no idea that that's
1385889	what's going to happen and the back
1387690	button would have gone back to my search
1389099	or social or wherever I was previously
1391700	like should there even be an app back
1394200	button in this context I don't know this
1397589	is the sort of thing we're gonna have to
1398729	figure out as we start designing not
1400529	just for a multitude of screens but a
1402179	multitude of contexts right like is a
1404070	browser Chrome there is it not there
1407149	fortunately there is a new media query
1409759	for display mode and when am i testing
1413700	any of the browsers that support
1415339	progressive web apps also support
1417359	display mode so you can use this display
1419879	mode to say am I in standalone mode am i
1422129	in full screen mode
1422909	maybe I don't show that button maybe
1424499	that button doesn't make sense in that
1426629	context maybe there are other changes
1428519	that I need to make if I'm in that mode
1430409	maybe I need to add things we need to
1434820	remember that not every customer or
1437129	potential customer will have our
1439019	progressive web apps added to the home
1440549	screen right like in the same way we
1442169	have to remember that not everybody has
1443429	our native apps installed like we have
1445259	to remember that people will be
1446909	accessing our sites in a browser context
1449309	we have to make sure that it makes sense
1450869	in both of those contexts I am
1453809	optimistic that the heuristics that
1456089	browsers are looking at will allow them
1457589	to to have more people install
1460859	applications but maybe we're just all
1465059	tired of installing apps
1466680	and doesn't matter what we do all right
1468810	and we won't see people adding icons to
1470790	their home screen that's a possibility
1472380	too the great thing though about
1475080	progressive Web Apps is even if they
1476670	don't add it to their home screen they
1478650	will still install your progressive web
1480300	app because even if they're viewing your
1483720	website in a browser all of that
1486510	functionality is still there right you
1489090	can still do the push notifications you
1490560	can still have offline behavior you can
1492090	still have a very fast experience you
1495600	don't have to have the icon on the home
1496710	screen for that to be to be available to
1499830	people all right because we don't have
1502770	the URL we don't have the address bar we
1504390	also need to worry about sharing in
1505860	social media it's no longer possible to
1509280	just like select on the sort of share
1511470	icon and then inside a phone os just
1513930	select Twitter and like instantly do
1515490	that sharing so of course that might
1518490	cause you to think well maybe we need to
1520740	get back to NASCAR right where we're
1522240	adding all of the social media buttons
1524100	back in on sites but before you do that
1527430	we might want to think about the fact
1529650	that a recent study found that only two
1531420	out of a thousand mobile users actually
1533550	tap on share buttons so if we write like
1540420	yay progressive web apps boo
1543390	we're losing the way that people find
1545250	out about our content you know to be
1549960	honest I'm not sure that we have a
1551040	really good solution for this yet I
1553020	think we need to be incredibly careful
1554730	if you have a business where a major
1558900	function of how you get garner revenue
1561450	is related to sharing you may find that
1564690	it doesn't make sense to do display mode
1566460	fullscreen or display mode standalone
1568650	that you'd rather have people inside the
1570750	browser still so that they had access to
1572430	the native controls for being able to
1574110	share content so that they continue to
1576060	have access to the URL bore bar even
1578610	though doing that means that that Add to
1580560	Home screen prompt won't show up but I
1583680	think that that would make sense in a
1585150	situation where that is really like the
1588060	core of your business if that's not the
1590130	case then we need to implement those
1591930	features very very carefully and
1594000	instrument them so that we can tell the
1596130	difference between how much stuff is
1597540	getting shared in sort of
1599660	the experience inside the browser versus
1602000	the ones that are fullscreen or or
1605420	standalone there's also a new API that
1608510	Google has been experimenting with
1609710	called the web share API which would
1612320	allow us to create through JavaScript
1615110	ways to actually get to the native
1617120	sharing panes so you could click a
1619910	button and it would actually go to the
1621320	native sharing um this is really
1622820	promising I do think though that we're
1624710	gonna have some challenges in conveying
1626150	to users that if they actually click on
1628160	that or tap on that particular button so
1631070	they're not going to be taken to the
1632210	sort of poor excuses for sharing that
1634460	we've done on the web in the past all
1637700	right another question should we app
1639530	shell or not app shell for those who
1641870	aren't familiar app shell is a way of
1643570	sort of defining it's defined some
1646340	content right the shell of a web page
1648460	and with service workers you make sure
1651470	that that stuff is stored offline and
1653750	can be loaded as quickly as possible by
1656360	doing so then you you affect the
1658700	perceived performance of the progressive
1661670	web app so by having the app shell
1665390	stored offline that first paint is
1667400	incredibly fast and then you can get the
1670850	content via Ajax and I think that out
1674570	shell was actually probably one of the
1676640	main reasons why the Washington Post
1679190	website feels so fast as a progressive
1681620	web app so in this video where I've I've
1684500	actually throttled down to 4G you'll
1686690	notice that actually both pages take
1689300	around the same time to load they're
1690980	actually not much different but the one
1693140	on the right is actually feels much
1694790	faster and one of the reasons why I
1696440	think it feels faster is that the
1698300	navigation bar or the menu bar never
1700400	goes away so I'm going to start the
1702260	video it's pretty quick but you can see
1704710	like the one on the right they both
1708410	actually the full load bar at the top
1710380	goes at about the same pace but the one
1712790	on the right feels much faster and I
1714860	think it's because it's using that app
1716330	shell model there are concerns about app
1721220	shell Jeremy Keith has written about the
1723950	fact that he feels like that the success
1727430	criterion for progressive web apps has
1729620	changed from what is best for the web to
1732230	how
1733040	feel like a native application and in
1736520	particular this idea that it's it's
1738530	being used this idea of app shells being
1740750	used as a get-out-of-jail-free card for
1742550	doing things sort of poorly for the web
1744770	for not using progressive enhancement
1746030	because they're using an app shell or
1747860	spa and this is I think problematic
1750890	right just because we're building a
1752150	progressive web app it should be
1753740	progressive it should still work in a
1756320	browser like Opera Mini Jake Archibald
1759740	with the chrome team has made the point
1761510	that we need to do a better job to
1762740	change the perception that progressive
1764210	web apps must be a single page app
1766910	client rendered application so app shell
1769370	is an option but it's not a must our
1771740	site is a progressive web app we're not
1774020	using an app show we talked about it we
1776600	may do it eventually but our sites
1778760	really really fast and we didn't feel
1780560	like we would get enough bang for the
1782690	development time to do it right now
1784540	there's a great article on site point
1786770	that came out recently that talks about
1788480	how to retrofit your website into a
1790400	progressive web app so check that out if
1793040	you're interested in doing that
1794890	all right the fourth question what part
1797480	of your site should be made into a
1798950	progressive web app Facebook on desktop
1801830	is a single application we move to
1804050	mobile of course we've got the Facebook
1805760	application but we've also got messenger
1807980	and events and pages and and groups and
1810650	and moments and and a bunch of things
1814670	that I don't even know what they are I'm
1816950	right like there are all these separate
1818900	applications so as you make the
1821330	transition from a website a particularly
1823250	complex website into a progressive web
1826010	app does it make sense for that whole
1828460	monolithic site to become your
1830270	progressive web app or do you start
1831950	pulling off pieces of it it's certainly
1834920	much easier if your site is simple like
1837440	browser sync is and that site itself can
1840320	become the progressive web app but there
1844430	are other organizations where I think
1845570	that it would make sense for example
1847460	Yahoo's native applications actually map
1849770	really well to their subdomains and
1851840	their separate products so sports tahu
1854030	calm and Finance at yahoo.com like those
1857000	are their native applications and from a
1859790	progressive web app perspective it would
1861170	make a lot of sense for those different
1863750	subdomains to actually be the apps and
1865760	also I think
1866990	bubbly Maps well to their teams I've
1869960	also been enamored with this idea of
1871580	tearaway apps because we've had a couple
1873590	of projects or potential customers where
1875780	I thought it might make sense so nest
1878809	has a really complex site it's got a
1880400	bunch of things it's got product
1881660	information support information things
1883820	of that nature but if you log in what
1886490	you get is you get a responsive
1888020	application that allows you to modify
1891559	the temperature of your thermostat or
1894530	monitor your other nest products this
1898690	interface actually is incredibly similar
1901550	to what their native application looks
1903980	like and I like this idea that that in
1907429	building a progressive web app that we
1909710	might not need to make the whole site
1911510	the progressive web app that maybe I
1913250	just want to tear off a bit of
1914720	functionality and take it with me on my
1916850	phone because it's really important for
1918860	me to have the ability to interact with
1921350	the thermostat availeth available with
1923900	me all the time and I can always go to
1926330	the nest site for the rest of the
1928130	information so these are for sort of
1931690	detailed questions about what we might
1934520	face as we start looking at building
1936440	progressive web apps and I think that at
1938600	the heart of them it really these are
1941150	really questions about what makes
1942770	something an app and most importantly
1945470	what our users expectations and how do
1947960	they change when they consider something
1949670	to be an app and that last one is
1951920	something we don't know yet
1953330	we're going to learn as people start
1955160	interacting with progressive web apps
1956540	I'm often mistake that people won't
1958490	assume that a progressive web app has to
1960200	be a hundred percent like a native
1961610	application because they visited a web
1963679	site in the past before they installed
1965870	it on their home screen they know what
1968390	it was like they know that it was web
1973179	irrespective regardless of what happens
1975170	with that great progressive web apps
1977120	we'll get some details right they'll
1980750	figure out what caching and offline
1982220	strategy makes sense for them so for
1985400	example a simple cache and performance
1987140	extreme it--be like what we see on
1988970	English accent maps where you go and you
1992420	see these videos the videos are pretty
1995030	funny I'll show you just a little bit of
1997610	this
1999030	[Applause]
2017609	the site is pretty funny like you can
2020589	get all these different accents both in
2022089	the US and in the UK if you go offline
2025479	though and you try to look at the
2028209	British versus American accents you'll
2030549	get a page that says sorry you're
2031899	offline and this is like a perfectly
2035499	adequate and makes sense experience for
2037509	this particular application they can't
2039519	do offline versions of Google Maps or at
2042459	least I doubt that they can with the
2043899	licensing and they can't do offline
2045699	versions of YouTube videos so they say
2048669	hey you're offline and they actually do
2049929	a little bit more they provide the
2051220	ability for somebody to favorite a video
2053379	if they wanted to to come back to that
2055509	accent a different strategy we used on
2059109	smashing we worked with Smashing
2061299	Magazine to make their site have a
2063700	serviceworker and progressive web app
2065289	and for them they wanted to make sure
2067599	that they cashed a series of pages and
2069519	then cache the most recently viewed
2071859	articles we did the same thing on our
2075220	own site
2076269	we felt like we didn't know what people
2078069	were going to want to have access to so
2079960	if you go offline on our site we show
2082059	you a notification bar that says you're
2083379	off site but you can continue to view
2085299	pages that you've previously viewed we
2088389	just let you know so that you know that
2089710	you can't comment on articles or things
2091720	of that nature and if you go to a page
2093519	that you haven't visited before and
2095710	isn't in the cache we let you know that
2097869	you're offline we could also let people
2101920	choose what to cache this is a demo that
2104259	Jake Archibald did of Wikipedia and
2106509	built for mobile where somebody can go
2108579	to these web pages and they can declare
2110140	what they want to have access to offline
2111819	and it sort of adds them to a cache of
2114130	things that they could read offline that
2116109	then they can delete things from or add
2117970	things to and then there are cases where
2121839	it may make sense to cache the entire
2123819	application ahead of time so this
2126069	another demo site that Jake built
2127900	pokedex it downloads all of the
2130690	different images related to the poker
2132400	index a pokemons index and make sure
2135099	that it's available to you offline this
2138010	is probably the one that we need to be
2139539	the most careful with because we need to
2141220	make sure that we don't suddenly have
2142900	somebody visit our site and behind the
2144760	scenes we're down leaning downloading
2146349	megabits of information right that would
2148690	be a pretty poor experience it's not
2150069	what people expect if you're a publisher
2154390	and you're doing things with amp you
2156400	should look at them amp to PWA install
2159039	path so if you're not familiar with amp
2162760	amp is accelerated mobile project it's
2165819	the things that show up in search
2167319	results and top stories they've got a
2168880	little icon that says amp it's got the
2172059	lightning bolt and they load incredibly
2173920	quickly they use a different variation
2176410	or some they really limit what you can
2179890	do on this web pages there's some
2182440	controversy about it but for people who
2184869	are doing amp there is something really
2186819	nice about the fact that there's now a
2188559	amp element that you can use to install
2191079	a serviceworker the Washington Post
2193450	wanted to do this so that what happens
2195279	is in search results somebody sees an
2197200	amp page they go to the amp page while
2199270	they're reading that article behind the
2201490	scenes the progressive web app is
2203170	installed and then if the person
2205480	proceeds onto the Washington Post
2207460	website they get that less than second
2209920	load times so if you're doing things in
2212890	amp it makes a lot of sense to make sure
2215319	that you've optimized for this path and
2217950	then finally in terms of the details we
2220869	need to get right we can't screw up push
2223000	notifications don't immediately ask for
2226329	permission when somebody visits your
2227829	site YouTube was doing this like a week
2229930	or two ago and thankfully they stopped
2232029	doing it but like it's it's like you
2233680	walked into a room and you meet somebody
2235240	for the first time and you're like hi
2236589	I'm Jason will you marry me
2238059	alright like I'm not ready for that
2239950	long-term relationship right I just
2242200	arrived at this site it doesn't make
2244240	sense and we need to keep in mind that
2247839	just because push notifications are new
2250329	on the web doesn't mean that they
2251980	haven't been around for a while users
2254140	are actually a bit annoyed by push
2256270	notifications um we need to make sure
2258760	that we use push notifications
2259829	responsibly showing that we use push
2262299	notifications responsibly is one of the
2263950	ways we can convince Apple
2265540	to implement push notifications on our
2269050	site when we implemented them we decided
2271660	that you know push notifications aren't
2273370	that big a deal like they shouldn't be
2274810	up in the banner we were like hey you
2276850	know subscribe
2278650	instead you read an article you get to
2280540	the end maybe you like it then we've got
2283240	a button you have to click the button or
2285970	tap the button in order to get the
2287470	prompt to ask you for permission we send
2290110	you a note that says thank you for
2291400	subscribing and then you can turn off
2293980	notifications from that exact same
2295750	interface that last a little bit that
2298540	last a little bit is a key detail that
2301180	you need to make sure you do if you
2303070	implement push notifications because
2305340	browsers are implementing kill switches
2307870	and if the user goes in and and uses
2311650	that kill switch inside their browser to
2313570	make sure that they no longer receive
2315130	notifications from your site you will
2317200	never be able to send that user
2318430	notifications again right so you need to
2321460	make sure you provide a way for people
2322690	to manage notifications inside your site
2325260	Owen who I mentioned earlier wrote a
2327670	great document that describes best
2329500	practices for UX push notifications and
2331510	permissions I highly recommend it
2334170	alright so assuming that you're not
2337300	scared by those challenges but you're
2339430	really excited about wanting to build it
2340840	like what is a plan what does a roadmap
2343120	look like for doing a progressive web
2345040	app and here's where it's exciting for
2347500	me because I think progressive web apps
2349960	are like like have so many layers of
2351790	puns in them they're like progressive
2354370	web apps are progressive because they
2355750	use progressive enhancement and they're
2357580	progressive because they also they also
2360250	progress in a relationship with the user
2362380	so they just start out behind the scenes
2363970	and then they kind of ask hey would you
2365920	like push notifications
2367270	hey this is available offline hey would
2369640	you like to add this to the homescreen
2370930	and they're also progressive because you
2373000	can progressively roll out the features
2375520	you don't have to do it all at one time
2377430	so when we worked on a progressive web
2379840	app for our site we knew that that's
2381610	where we wanted to end up but the first
2383920	stop was actually this redesign that we
2385900	were working on so we did a redesign and
2388060	with that redesign we went to HTTPS and
2391240	we also made the site faster using HTTP
2395200	2 and we added a manifest right like
2398290	it's not the
2399070	in manifest but we added one because it
2400780	makes it easier to bookmark on Android
2403380	then we added a serviceworker about you
2407440	know a couple months later with that it
2409420	was available offline and an offline
2411400	fallback it was technically a
2412600	progressive web app but we weren't
2415360	satisfied a couple weeks later we added
2416920	offline pages and we added an offline
2418810	indicator we did some stuff to improve
2420850	performance again and then we added push
2425440	notifications and again we did some
2427780	performance tweaks we keep doing these
2429760	performance tweaks and then a couple
2431950	weeks after that we announced that we
2435130	had a progressive web app now what's
2437920	important about this is that each one of
2439690	those milestones we were delivering
2441850	things to the user that improved their
2444550	experience we didn't have to wait till
2446950	the end to bundle it all up into some
2448720	big binary and roll it out we could do
2451510	this a long time we could put together a
2453970	plan actually execute on that plan and
2456550	we're not done we're still making
2458710	improvements but this is why it's
2460600	important like every step on the way on
2463090	the path to progressive web app makes
2465010	sense on its own and not only that but
2467380	it provides every step actually provides
2469390	benefit to your users so I started by
2473050	talking about the hype around
2474430	progressive web apps and how it was
2476110	annoying me and it's not that the hype
2478330	is overinflated necessarily it's that
2480190	the hype is just completely looking at
2481870	the wrong thing right all the hype is
2483910	about native versus web and I'm tired of
2486880	that discussion what I think the height
2489430	should be about is how building
2490990	progressive web apps actually allow us
2492670	to build better experiences and not only
2495760	that but when you combine progressive
2497350	web apps with features that are now
2498700	available in browsers that we've never
2500080	had before like the payment request API
2502420	and Apple pay on the web and Bluetooth
2505900	web api and physical web api and like
2509170	these features we're finally getting to
2510940	the point where we can actually have
2512050	frictionless fast fluid beautiful
2515170	experiences right we can do these on
2517510	mobile devices these are things that
2518980	we've never been able to do on desktop
2521350	and now we're at the point where we
2524020	could actually do that more somebody
2525310	could get a link and buy something with
2527500	their fingerprint right those types of
2529900	experiences are now coming to us on the
2532420	web
2532780	and progressive web apps are a big part
2534580	of that and a big part of what's
2535780	possible in the future for the web so I
2538060	don't think that they've been overhyped
2539290	they've just been sold in the wrong way
2540910	and I hope you feel the same way about
2542440	it and you go back to your
2543400	organization's and you build a
2544540	progressive web app right now thank you
2546280	very much
2547260	[Applause]
